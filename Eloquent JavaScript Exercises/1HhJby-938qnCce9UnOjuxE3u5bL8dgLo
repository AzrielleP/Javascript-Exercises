/*
Make the Group class from the previous exercise iterable
*/

class Group{
    constructor() {
      this.array = [];
    }
  
    add(value) {
      if(!this.has(value))
      return this.array.push(value);
    }
  
    delete(value) {
      if (this.has(value)) return this.array.splice(this.array.indexOf(value), 1);
    }
  
    // or use: return this.array.filter( x => x !== value)
    
    has(value) {
      return this.array.includes(value);
    }
  
    static from(value) {
      let group = new Group;
      for (let element of value) {
          group.add(element);
          }
      return group;
      }
    
    [Symbol.iterator](){
        return new GroupIterator(this);
    }
}

class GroupIterator{
    constructor(group){
        this.group = group;
        this.count = 0;
    }

    next(){
        if(this.count >= this.group.array.length){
          return {done: true};
        }
        else {
          let x =  {value: this.group.array[this.count], done: false};
          this.count++;
          return x;
        }
    }
}

for (let value of Group.from(["a", "b", "c"])) {
  console.log(value);
}